#include <iterator>
#include <cstdio>
#include "str.h"

std::ostream& operator<<(std::ostream& os, const Str& s)
{
	std::ostream_iterator<char> out(os, "");
	std::copy(s.begin(), s.end(), out);
	return os;
}

std::istream& operator>>(std::istream& is, Str& s)
{
	// obliterate existing value(s)
	s.data.clear();
	
	// read and discard leading whitespace
	char c;
	while (is.get(c) && isspace(c)) {
		;	// nothing to do except testing the condition
	}

	// if still something to read
	if(is) {
		do s.data.push_back(c);
		while (is.get(c) && !isspace(c));

		// if we read whitespace, then put it back on the stream
		if(is)
			is.unget();
	}

	return is;
}

Str operator+(const Str& s, const Str& t)
{
	Str r;
	r += t;
	return r;
}

char* Str::c_str()
{
	char* temp = _data();
	temp[size()] = '\0';
	return temp;
}

char* Str::_data(bool cleanup)
{
	static char* c_arr;
	if(c_arr)
		delete[] c_arr;
	if(!cleanup) {
		c_arr = new char[size()];
		std::copy(data.begin(), data.end(), c_arr);
	}	
	return c_arr;
}

void Str::copy(char* p, size_type n)
{
	for(size_type i = 0; i != n; ++i, ++p)
		*p = data[i];
}

bool operator==(Str& a, Str& b)
{
	if(a.size() != b.size())
		return false;
	for(Str::size_type i = 0; i != a.size(); ++i)
		if(a[i] != b[i])
			return false;
	return true;
}

bool operator!=(Str& a, Str& b)
{
	return !operator==(a, b);
}

std::istream& getline(std::istream& is, Str& s)
{
	is >> s;
	return is;
}
