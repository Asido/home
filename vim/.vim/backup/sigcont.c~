#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

void handler(int sig)
{
	printf("signal handler called\n");
}

int main(int argc, char *argv[])
{
	struct sigaction act;
	sigset_t block_sig_mask, old_sig_mask;

	/* put SIGCONT to ignore list */
	sigemptyset(&block_sig_mask);
	sigaddset(&block_sig_mask, SIGCONT);
	if (sigprocmask(SIG_SETMASK, &block_sig_mask, &old_sig_mask) == -1) {
		printf("ERROR: sigprocmask\n");
		exit(EXIT_FAILURE);
	}

	sigemptyset(&act.sa_mask);
	act.sa_handler = handler;
	act.sa_flags = 0;
	if (sigaction(SIGCONT, &act, NULL) == -1) {
		printf("ERROR: sigaction\n");
		exit(EXIT_FAILURE);
	}

	printf("Waiting 10s\n");
	int start_time;
	for (start_time = time(NULL); start_time + 10 > time(NULL); ) {}
		

	printf("10s elapsed. removing signal mask\n");
	/* if (sigprocmask(SIG_SETMASK, &old_sig_mask, NULL) == -1) { */
	/* 	printf("ERROR: sigprocmask2\n"); */
	/* 	exit(EXIT_FAILURE); */
	/* } */
	printf("Waiting 10s\n");
	for (start_time = time(NULL); start_time + 10 > time(NULL); ) {}

	printf("exiting\n");
	exit(EXIT_SUCCESS);
}
