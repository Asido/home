#include <stdio.h>
#include <stdlib.h>
#include "bmploader.h"

static int width;
static int height;

/* Combines an integer from 4 little-endian chars */
int readInt(FILE* stream)
{
	int i;
	char arr[4];

	for (i = 0; i < 4; ++i)
		arr[i] = fgetc(stream);
	return (int) (arr[3] << 24 |
				  arr[2] << 16 |
				  arr[1] << 8 |
				  arr[0]);
}

short readShort(FILE* stream)
{
	int i;
	char arr[2];

	for (i = 0; i < 2; ++i)
		arr[i] = fgetc(stream);
	return (short) (arr[1] << 8 | arr[0]);
}

float* loadBmp(char* url)
{
	/* Array which is going to hold RGB values */
	float* rgb;
	/* For determining the size of the array we will need */
	/* int width, height; */
	/* Opens the file 'r' for read, 'b' as binary */
	FILE *file = fopen(url, "rb");
	/* If the file successfully open to read as a binary, continue */
	if (file)
	{
		printf("'%s' is opened and ready to read from.\n", url);
		/* The first 2 characters of BMP binary code are always two letters - 'B''M' */
		if (!(fgetc(file) == 'B' && fgetc(file) == 'M'))
		{
			printf("File is not a BMP format. Exiting...\n");
			exit(1);
		}
		/* Prints the size of the image from the next 4 chars combined as an int */
		printf("File size: %d bytes.\n", readInt(file));
		
		/* Skip 4 chars */
		fseek(file, 4, SEEK_CUR);

		/* Start of the RGB array */
		int offset = readInt(file);

		/* Opened bitmap header size */
		int header = readInt(file);
		switch (header)
		{
			/* Standard Windows 3.1 bitmap (the only supported) */
			case 40:
				/* Now comes the width and height values */
				width = readInt(file);
				height = readInt(file);
				printf("Image width: %d pixels.\n", width);
				printf("Image height: %d pixels.\n", height);
				fseek(file, 2, SEEK_CUR);
				printf("Bits per pixel: %d.\n", readShort(file));

				/* Go to the place where RGB array starts */
				/* NOTE: SEEK_SET goes to the 'offset' starting from the beginning of the file */
				fseek(file, offset, SEEK_SET);

				/* Allocate memory for holding RGB values */
				rgb = (unsigned char *)malloc(width * height);
				/* Start filling the array with RGB values */
				int i = 0;
				unsigned char c;
				c = fgetc(file);
				while (!feof(file)) /* while != EOF */
				{
					/* Since RGB values are equal, we take every third RGB value */
					/* In this case - every Red */
					fseek(file, 2, SEEK_CUR);
					rgb[i++] = c;
					c = fgetc(file);
				}
				break;
			/* OS/2 bitmap */
			case 12:
				printf("OS/2 bitmaps not supported. Exiting...");
				exit(1);
				break;
			default:
				printf("Unknown bitmap format. Exiting...");
				break;
		}
	}
	else
	{
		printf("Cannot open file: '%s'. Exiting...\n", url);
		exit(1);
	}

	fclose(file);

	return rgb;
}

int getLastLoadedWidth(void)
{
	return width;
}

int getLastLoadedHeight(void)
{
	return height;
}
