#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

void handler(int sig)
{
	printf("HANDLER OF SIGNAL: %d\n", sig);
}

int main(int argc, char *argv[])
{
	struct sigaction act;
	sigset_t block_sig_mask, old_sig_mask;

	printf("PID: %ld\n", getpid());

	/* put SIGCONT to ignore list */
	sigfillset(&block_sig_mask);
	if (sigprocmask(SIG_SETMASK, &block_sig_mask, &old_sig_mask) == -1) {
		printf("ERROR: sigprocmask\n");
		exit(EXIT_FAILURE);
	}

	sigemptyset(&act.sa_mask);
	act.sa_handler = handler;
	act.sa_flags = 0;
	int i;
	for (i = 1; i < 32; ++i ) {
		if (i == SIGKILL || i == SIGSTOP)
			continue;
		printf("Registering signal: %d\n", i);
		if (sigaction(i, &act, NULL) == -1) {
			printf("ERROR: sigaction\n");
			exit(EXIT_FAILURE);
		}
	}
	sigaction(SIGFPE, &act, NULL);

	i = 5 / 0;
	printf("Waiting 10s\n");
	int start_time;
	for (start_time = time(NULL); start_time + 10 > time(NULL); ) {}
		

	printf("10s elapsed. removing signal mask\n");
	/* comment this if block to keep the signal blocked */
	if (sigprocmask(SIG_SETMASK, &old_sig_mask, NULL) == -1) {
		printf("ERROR: sigprocmask2\n");
		exit(EXIT_FAILURE);
	}
	printf("Waiting 10s\n");
	for (start_time = time(NULL); start_time + 10 > time(NULL); ) {}

	printf("exiting\n");
	exit(EXIT_SUCCESS);
}
