#!/bin/bash

# To make sure that the standard utilities are executed
PATH=/bin:/usr/bin
# This returns the name of the script. In this case: 'safedit.sh'.
# Without 'basename' keyword it would return './safedit.sh'.
script=$(basename $0)

case $# in
	# If safedit is called without any arguements, it just open vim and exit
	0)
		vim
		exit 0
		;;
	1)
		# If file doesn't exists, create it by opening it with vim (no need any further checking)
		if [ ! -f "$1" ]; then
			vim "$1"
			exit 0
		fi

		# Else, here we check if we have read and write permissions on that file
		if [ ! -r "$1" -o ! -w "$1" ]; then
			echo "$script: check permissions on $1" 1>&2
			exit 1
		# If so, we create a variable which holds the file name
		else
			editfile=$1
		fi

		# Here we check if we have write permission in the working directory.
		if [ ! -w "." ]; then
			echo "$script: backup cannot be " \
				" created in the working directory" 1>&2
			exit 1
		fi
		;;

	# If more then 1 argument is given, we output the usage message.
	*)
		echo "Usage: $script [file-to-edit]" 1>&2
		exit 1
		;;
esac

# '$$' expression gives the current process ID (PID).
# It is a good way to ensure that the file name is going to be unique.
tempfile=/tmp/$script.$$
cp $editfile $tempfile
# When you finish editing file with vim and exit it, vim will returns an exit code.
# By that code, it is determined which branch to take.
vimexit=(vim $editfile)
echo "$vimexit" >> vimreturn
if "$vimexit"; then
	mv $tempfile $(basename $editfile).bak
	echo "$script: backup file created"
else
	mv $tempfile editerr
	echo "$script: edit error--copy of " \
		"original file is in editerr" 1>&2
fi
