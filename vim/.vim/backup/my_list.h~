#ifndef MY_LIST_IT4UKAKV
#define MY_LIST_IT4UKAKV

#include <iostream>

template <class T>
class LinkList
{
	struct Node;

	public:
		typedef Node* iterator;
		typedef const Node* const_iterator;
		typedef size_t size_type;
		typedef T value_type;

		LinkList()
		{
			init();
		}

		 ~LinkList()
		 {
		 	clear();
		 }

		void push_back(const T& val)
		{
			Node *n = new Node(val);
			if(!first)
			{
				first = n;
				last = n;
			}
			else
			{
				last->set_next(n);
				last = n;
			}
		}

		void clear();

		iterator begin()
		{
			return first;
		}
		const_iterator begin() const
		{
			return first;
		}

		iterator end()
		{
			return last;
		}
		const_iterator end() const
		{
			return last;
		}

	private:
		struct Node
		{
			public:
				Node(const T& val)
				{
					value = val;
				}

				T get_value()
				{
					return value;
				}

				void set_next(iterator n)
				{
					next = n;
				}

				operator T()
				{
					return value;
				}

				iterator operator++()
				{
					return next;
				}

			private:
				T value;
				iterator next;
		};
		
		iterator first;
		iterator last;

		void init()
		{
			first = last = 0;
		}
};

template <class T>
void LinkList<T>::clear()
{
	// for(iterator it = begin(); it != end(); it++)
	// 	delete it;
	delete first;
}

#endif /* end of include guard: MY_LIST_IT4UKAKV */
