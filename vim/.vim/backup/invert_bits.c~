#include <stdio.h>

unsigned invert(unsigned x, int p, int n);

/* I won't comment a lot here, check 2_replace_bits for real comments on these. */
int main() {
	printf("%d\n", invert(99, 5, 3));

	return 0;
}

unsigned invert(unsigned x, int p, int n) {
	/* create a variable equals to max value (binary: 11111111...) */
	int block2invert = ~0;
	/* the block which is going to be inverted in 'x', in this variable is going to be '111...' */
	block2invert = ~(block2invert << n) << (p + 1 - n);
	/* at this moment x = 1[100]011 (99) and block2invert = 0[111]000 (value in deci doesn't matter, we just need to have a block of bits with value 1)
	 * so XOR makes not equals values to 1 and equal values to 0
	 * result: x = 1[011]011 (91)
	 */
	x = x ^ block2invert;

	return x;
}
