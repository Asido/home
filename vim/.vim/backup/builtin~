$. [this variable holds the number of lines of input the program has read]
$_ [variable something like representing 'it'. check loops directory for usage]
@_ [when you pass parameters to a subroutine, this is the array where they are kept WARNING: changing them in a subroutine, affects the original variables!]
$! [holds the last error. in numeric contex - system error number, in strig context - system error message]
@ARGV [array of arguments passed to the application]
$ARGV [check input/file3a.pl for usage. basicly it holds one of the argument from array '@ARGV' the program is currently working with]

/////////////////////////
////	FUNCTIONS	 ////
/////////////////////////

shift(@array) [shifts all elements in the array to the left by removing the first element]
push(@array, "hi") [adds string "hi" to the end of the array]
pop(@array) [removes the last element of the array]
splice(@array, 1, 2, @array2) [replaces 1 and 2 @array elements with @array2 elements]
chomp($var) [removes new line \n character from the end of the string (used after users input)]
sort {lc($a) cmp lc($b)} @array [sorts the @array elements in ascending order ignoring case (if not ignore, upper case elements go in front of lower case)]
substr($string, 4) [substrings a sting by removing first 4 characters (return a string from 4th character of $string to the end)]
split(/regexp/, $string) [makes an array out of $string by splitting it according the regexp (in most cases in regexp place is put 1 character)]
glob("/home/asido/*"); [returns an array containing all the file names in the provided directory]
open()
close()
opendir()
readdir()
closedir()
