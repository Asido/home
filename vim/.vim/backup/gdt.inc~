;*******************************************************
;		gdt.inc
;			- GDT (Global Descriptor Table) Routines
;*******************************************************

%ifndef __GDT_INC_
%define __GDT_INC_

bits 16

;------------------------------
; define descriptor offsets
;------------------------------
%define NULL_DESC 0x0
%define CODE_DESC 0x8
%define DATA_DESC 0x10

;------------------------------------------
; INSTALL_GDT()
;	- Install our GDT
;------------------------------------------
INSTALL_GDT:
	cli				; clear interrupts
	pusha			; save registers
	lgdt [TOC]		; load GDT into GDTR (register)
	sti				; enable interrupts
	popa			; restore registers
	ret				; All done!


;-------------------------------------
; Global Descriptor Table (GDT)
;-------------------------------------
GDT_DATA:
	; null descriptor
	dd 0
	dd 0

	; code descriptor
	dw 0xFFFF		; limit low
	dw 0			; base low
	db 0			; base middle
	db 10011010b	; access
	db 11001111b	; granularity
	db 0			; base high

	; data descriptor
	dw 0xFFFF		; limit low
	dw 0			; base low
	db 0			; base middle
	db 10010010b	; access
	db 11001111b	; granularity
	db 0			; base high
END_OF_GDT:

TOC:
	dw END_OF_GDT - GDT_DATA - 1	; limit (Size of GDT)
	dd GDT_DATA						; base of GDT

%endif ; __GDT_INC_


;***************************************************************
;						GDT MANUAL
;***************************************************************
; Descriptor is an 8 byte QWORD value that describes properties for the descriptor. They are of the format:
;
;    Bits 56-63: Bits 24-32 of the base address
;    Bit 55: Granularity
;        0: None
;        1: Limit gets multiplied by 4K
;    Bit 54: Segment type
;        0: 16 bit
;        1: 32 bit
;    Bit 53: Reserved-Should be zero
;    Bits 52: Reserved for OS use
;    Bits 48-51: Bits 16-19 of the segment limit
;    Bit 47 Segment is in memory (Used with Virtual Memory)
;    Bits 45-46: Descriptor Privilege Level
;        0: (Ring 0) Highest
;        3: (Ring 3) Lowest
;    Bit 44: Descriptor Bit
;        0: System Descriptor
;        1: Code or Data Descriptor
;    Bits 41-43: Descriptor Type
;        Bit 43: Executable segment
;            0: Data Segment
;            1: Code Segment
;        Bit 42: Expansion direction (Data segments), conforming (Code Segments)
;        Bit 41: Readable and Writable
;            0: Read only (Data Segments); Execute only (Code Segments)
;            1: Read and write (Data Segments); Read and Execute (Code Segments)
;    Bit 40: Access bit (Used with Virtual Memory)
;    Bits 16-39: Bits 0-23 of the Base Address
;    Bits 0-15: Bits 0-15 of the Segment Limit
