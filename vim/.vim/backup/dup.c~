#include "../../../source/lib/tlpi_hdr.h"
#include "dup.h"

int main(int argc, char* argv[])
{
	if (argc < 3 || argc > 4 || strcmp(argv[1], "--help") == 0)
		usageErr("%s filename size", argv[0]);

	size_t buff_size = atoi(argv[2]);
	char buff_1[buff_size / 3];
	char buff_2[buff_size / 3];
	char buff_3[buff_size / 3];
	int fd_1 = open(argv[1], O_RDONLY);
	int fd_2;
	printf("fd_1 = %d\n", fd_1);
	int result_1 = read(fd_1, buff_1, buff_size / 3);
	if (argc == 3)
		fd_2 = dup(fd_1);
	else
		fd_2 = dup2(fd_1, atoi(argv[3]));
	if (errno == EBADF)
		printf("bad old_fd\n");
	printf("fd_2 = %d\n", fd_2);
	int result_2 = read(fd_2, buff_2, buff_size / 3);
	int result_3 = read(fd_1, buff_3, buff_size / 3);
	int tmp = close(fd_1);
	if (tmp == -1) printf("error in close fd_1\n");
	tmp = close(fd_2);
	if (tmp == -1) printf("error in close fd_2\n");
	if (result_1 == -1) printf("error in read buff_1\n");
	if (result_2 == -1) printf("error in read buff_2\n");
	if (result_3 == -1) printf("error in read buff_3\n");
	printf("buff_1: %s\n", buff_1);
	printf("buff_2: %s\n", buff_2);
	printf("buff_3: %s\n", buff_3);
	exit(EXIT_SUCCESS);
}

int dup(int old_fd)
{
	return fcntl(old_fd, F_DUPFD);
}

int dup2(int old_fd, int new_fd)
{
	if (!fcntl(old_fd, F_GETFL)) {
		errno = EBADF;
		return -1;
	}
	if (old_fd == new_fd)
		return new_fd;
	close(new_fd);
	int created_fd = fcntl(old_fd, F_DUPFD, new_fd);
	printf("dup2: allocated fd = %d\n", created_fd);
	if (created_fd != new_fd)
		return -1;
	return created_fd;
}
