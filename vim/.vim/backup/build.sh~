#!/bin/bash

# folder info
SRC_DIR=src
BUILD_DIR=build
BOOTABLE_FLOPPY_IMG=FLOPPY.IMG

# declare color constants used for the output
COLOR_GREEN=$(tput setaf 2)		# green
COLOR_RED=$(tput setaf 1)		# red
COLOR_RESET=$(tput sgr0)		# reset

# compiles C library
# function build_c_lib
# {
# 	echo -n "${COLOR_GREEN}Compiling C library...			${COLOR_RESET}"
# 
# 	if [ ! -e $BUILD_DIR ]; then
# 		mkdir -p build/libc
# 	elif [ ! -e $BUILD_DIR/libc ]; then
# 		mkdir $BUILD_DIR/libc
# 	fi
# 	check_status $SILENT_SUCCESS
# 
# 	gcc -Wextra -O -fstrength-reduce -fomit-frame-pointer -finline-functions -nostdinc -fno-builtin -I./$SRC_DIR/inc -c -o $BUILD_DIR/libc/main.o $SRC_DIR/libc/main.c #&> /dev/null
# 	check_status $SILENT_SUCCESS
# 	gcc -Wextra -O -fstrength-reduce -fomit-frame-pointer -finline-functions -nostdinc -fno-builtin -I./$SRC_DIR/inc -c -o $BUILD_DIR/libc/scrn.o $SRC_DIR/libc/scrn.c #&> /dev/null
# 	check_status
# }

function check_status
{
	if [ $? != 0 ]; then
		echo "${COLOR_RED}*** FATAL: Build failed. Check the ouput above.${COLOR_RESET}"
		exit
	fi
}


# do the cleanup before processing
if [ -e $BUILD_DIR ] || [ -e $BOOTABLE_FLOPPY_IMG ]; then
	echo "${COLOR_GREEN}Cleaning up...${COLOR_RESET}"
	rm -rf $BUILD_DIR $BOOTABLE_FLOPPY_IMG #&> /dev/null
	check_status
fi


# build the loader
if [ ! -e $BUILD_DIR/boot ]; then
	mkdir -p ${BUILD_DIR}/boot
fi
echo "${COLOR_GREEN}Building boot loader...${COLOR_RESET}"
nasm -f bin -g -i `pwd`/$SRC_DIR/boot/inc/ -o $BUILD_DIR/boot/bootload.bin $SRC_DIR/boot/bootload.asm #&> /dev/null
check_status
nasm -f bin -g -i `pwd`/$SRC_DIR/boot/inc/ -o $BUILD_DIR/boot/STAGE2.SYS $SRC_DIR/boot/stage2.asm #&> /dev/null
check_status
nasm -f elf -g -o $BUILD_DIR/boot/krnldr.o $SRC_DIR/boot/krnldr.asm
check_status
# nasm -f bin -g -i `pwd`/$SRC_DIR/inc/ -o $BUILD_DIR/KERNEL.SYS $SRC_DIR/kernel.asm


# build libc
if [ ! -e $BUILD_DIR/core/lib ]; then
	mkdir -p ${BUILD_DIR}/core/lib
	check_status
fi
gcc -Wextra -O -fPIC -nostdlib -fno-builtin -nodefaultlibs -I./$SRC_DIR/core/include -o $BUILD_DIR/core/lib/string.o -c $SRC_DIR/core/lib/string.c
check_status
gcc -Wextra -O -fPIC -nostdlib -fno-builtin -nodefaultlibs -I./$SRC_DIR/core/include -o $BUILD_DIR/core/lib/stdio.o -c $SRC_DIR/core/lib/stdio.c
check_status


# build kernel
if [ ! -e $BUILD_DIR/core/kernel32 ]; then
	mkdir -p ${BUILD_DIR}/core/kernel32
fi
echo "${COLOR_GREEN}Building kernel...${COLOR_RESET}"
gcc -o ${BUILD_DIR}/core/kernel32/main.o -c ${SRC_DIR}/core/kernel32/main.c -I${SRC_DIR}/core/include -Wall -fno-builtin -Wextra -nostdlib -nostartfiles -nodefaultlibs
check_status
# gcc -o ${BUILD_DIR}/io.o -c ${SRC_DIR}/io.c -I${SRC_DIR}/libc -Wall -Wextra -nostdlib -nostartfiles -nodefaultlibs
# ld -T ${SRC_DIR}/linker.ld -o ${BUILD_DIR}/KERNEL.SYS ${BUILD_DIR}/krnldr.o ${BUILD_DIR}/io.o ${BUILD_DIR}/kernel.o
ld -T ${SRC_DIR}/linker.ld -o ${BUILD_DIR}/core/KERNEL ${BUILD_DIR}/boot/krnldr.o ${BUILD_DIR}/core/lib/string.o ${BUILD_DIR}/core/lib/stdio.o ${BUILD_DIR}/core/kernel32/main.o
check_status


# create bootable floppy image
echo "${COLOR_GREEN}Creating bootable floppy image...${COLOR_RESET}"
mkfs.msdos -C $BOOTABLE_FLOPPY_IMG 1440
dd if=${BUILD_DIR}/boot/bootload.bin of=$BOOTABLE_FLOPPY_IMG bs=512 count=1 conv=notrunc	
sudo mount -o loop $BOOTABLE_FLOPPY_IMG /mnt/hd
sudo cp ${BUILD_DIR}/boot/STAGE2.SYS /mnt/hd/STAGE2.SYS
sudo cp ${BUILD_DIR}/core/KERNEL /mnt/hd/KERNEL
sudo umount /mnt/hd


# finish everything up
echo "${COLOR_GREEN}All done! A bootable FLOPPY.IMG was created.${COLOR_RESET}"
