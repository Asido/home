#ifndef GUARD_vec_h
#define GUARD_vec_h

#include <memory>

template <class T> class Vec {
	public: 
		// class typedefs
		typedef T* iterator;
		typedef const T* const_iterator;
		typedef size_t size_type;
		typedef T value_type;
		
		// Constructors
		Vec() { create(); }
		explicit Vec(size_type n, const T& val = T()) { create(n, val); }

		// The Rule of Three
		Vec(const Vec& v) { create(v.begin(), v.end()); }	// copy constructor
		Vec& operator=(const Vec&); 						// assigment operator
		~Vec() { uncreate(); }								// destructor

		// indexing operators
		T& operator[](size_type i) { return data[i]; }
		//const T& operator[](size_type i) { return data[i]; }

		// function for appending an object to the end of the collection
		// and increases the size of the collection by one
		void push_back(const T& t) {
			if(avail == limit)
				grow();
			unchecked_append(t);
		}

		// returns the size of the collection class
		size_type size() const { return avail - data; }

		// returns iterators
		iterator begin() { return data; }
		//const_iterator begin() { return data; }
		iterator end() { return avail; }
		//const_iterator end() { return avail; }

	private:
		iterator data;	// first element in the Vec
		iterator avail;	// (one past) the last element in the Vec
		iterator limit; // (one past) the allocated memory

		// facilities for memory allocation
		std::allocator<T> alloc; // object to handle memory allocation

		// allocate and initialize the underlying array
		void create();
		void create(size_type, const T&);
		void create(const_iterator, const_iterator);

		// destroy the elements in the array and free the memory
		void uncreate();

		// support functions for push_back
		void grow();
		void unchecked_append(const T&);
};


template <class T>
Vec<T>& Vec<T>::operator=(const Vec& rhs) {
	// check for self-assignment
	if(&rhs != this) {
		// free the array in the left-hand side
		uncreate();
		
		// copy elements from the right-hand to the left-hand side
		create(rhs.begin(), rhs.end());
	}
	// return dereferenced object ('this' points to the address in memory of the object, on which the member function is operating
	return *this;
}

/* all 3 create method definitions */
template<class T> void Vec<T>::create() {
	data = avail = limit = 0;
}

template<class T> void Vec<T>::create(size_type n, const T& val) {
	data = alloc.allocate(n);
	limit = avail = data + n;
	uninitialized_fill(data, limit, val);
}

template<class T> void Vec<T>::create(const_iterator i, const_iterator j) {
	data = alloc.allocate(j - i);
	limit = avail = uninitialized_copy(i, j, data);
}

/* uncreate function undo what the create functions did */
template<class T> void Vec<T>::uncreate() {
	// if data == 0, there's no work to do
	if(data) {
		// destroy (in reverse order) the elements that were constructed
		iterator it = avail;
		while(it != data)
			alloc.destroy(--it);
		// return all the space that was allocated
		alloc.deallocate(data, limit - data);
	}
	// reset pointers to indicate that the Vec is empty again
	data = limit = avail = 0;
}

/* members used by push_back: */
template <class T> void Vec<T>::grow() {
	// when growing, allocate twice as much space as currently in use
	size_type new_size = std::max(2 * (limit - data), ptrdiff_t(1));

	// allocate new space and copy existing elements to the new space
	iterator new_data = alloc.allocate(new_size);
	iterator new_avail = std::uninitialized_copy(data, avail, new_data);

	// return the old space
	uncreate();

	// reset pointers to point to the newly allocated space
	data = new_data;
	avail = new_avail;
	limit = data + new_size;
}

/* assumes avail points are allocated, but uninitialized space */
template <class T> void Vec<T>::unchecked_append(const T& val) {
	alloc.construct(avail++, val);
}

#endif
