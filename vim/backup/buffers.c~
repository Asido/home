#include <GL/glut.h>

#define VERTICES	0
#define INDICES		1
#define NUM_BUFFERS 2

#define BUFFER_OFFSET(bytes)	((GLubyte *) NULL + (bytes))

void display(void)
{
	GLuint buffers[NUM_BUFFERS];

	GLfloat vertices[][3] = {
		{ -1.0f, -1.0f, -1.0f },
		{  1.0f, -1.0f, -1.0f },
		{  1.0f,  1.0f, -1.0f },
		{ -1.0f,  1.0f, -1.0f },
		{ -1.0f, -1.0f,  1.0f },
		{  1.0f, -1.0f,  1.0f },
		{  1.0f,  1.0f,  1.0f },
		{ -1.0f,  1.0f,  1.0f }
	};

	GLubyte indices[][4] = {
		{ 0, 1, 2, 3 },
		{ 4, 7, 6, 5 },
		{ 0, 4, 5, 1 },
		{ 3, 2, 6, 7 },
		{ 0, 3, 7, 4 },
		{ 1, 5, 6, 2 }
	};

	GLfloat subData[][3] = {
		{ -1.0f, -1.0f, -1.0f },
		{ -1.0f,  1.0f,  1.0f }
	};

	/* generate buffers
	 * NUM_BUFFERS = amount of buffer objects to generate
	 * buffers = array in which the generated buffer object names are stored
	 */
	glGenBuffers(NUM_BUFFERS, buffers);

	/* binds a named buffer object
	 * the first argument is the constant target to where the buffer should be bind
	 * the second is the name of the buffer object
	 */
	glBindBuffer(GL_ARRAY_BUFFER, buffers[VERTICES]);
	/* creates and initializes buffer objects data store */
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	glBufferSubData(GL_ARRAY_BUFFER, sizeof(vertices) * -1, sizeof(vertices) * 2, subData);

	glVertexPointer(3, GL_FLOAT, 0, BUFFER_OFFSET(0));
	glEnableClientState(GL_VERTEX_ARRAY);

	/* second buffer initialization */
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers[INDICES]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0f, 1.0f, 1.0f);
	glDrawElements(GL_QUADS, 24, GL_UNSIGNED_BYTE, BUFFER_OFFSET(0));

	glutSwapBuffers();
}

void initRenders(void)
{
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glOrtho(-2.0, 2.0, -2.0, 2.0, -1.0, 1.0);
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(500, 400);
	glutInitWindowPosition(200, 200);
	glutCreateWindow(argv[0]);

	initRenders();

	glutDisplayFunc(display);
	glutMainLoop();

	return 0;
}
