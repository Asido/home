public class Barber extends Thread implements Observer
{
	// the list where the customers are registered
	private WaitList wait_list;

	// CONSTRUCTOR
	public Barber(WaitList wait_list)
	{
		super("Barber");
		this.wait_list = wait_list;
		// register itself in wait list observer list
		// in order to get notified when the customer arrives
		wait_list.add_observer(this);
	}

	// this method is called by WaitList when the customer sits down
	// if the Barber is sleeping, it will wake the thread up
	public void notify_observer()
	{
		// first check if the thread is sleeping and if so, then wake it up
		Thread.State thread_state = this.getState();
		if (thread_state == Thread.State.WAITING || thread_state == Thread.State.TIMED_WAITING) {
			// a surprise - IllegalMonitorStateException if the call is not synchronized
			synchronized (this) {
				this.notify();
			}
		}
	}

	// main thread method
	public void run()
	{
		while (true) {
			Main.LOCK.lock();
			boolean locked = true;
			// check if waiting list is empty
			if (wait_list.is_empty()) {
				Main.LOCK.unlock();
				locked = false;
				System.out.println("BARBER: waiting list is empty. Going to sleep...");
				try {
					// a surprise - IllegalMonitorStateException if the sleep call is not synchronized
					synchronized (this) {
						wait();
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
			if (locked)
				Main.LOCK.unlock();

			// if waiting list is not empty, call next customer
			System.out.println("BARBER: next!");
			Main.LOCK.lock();
			wait_list.next();
			Main.LOCK.unlock();

			// and here serve the customer for a random time
			System.out.println("BARBER: serving a customer.");
			try {
				// serve for 0-5s
				Thread.sleep((int)(Math.random() * 5000));
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			System.out.println("BARBER: customer served.");
			// easy peasy lemon squezy
		}
	}
}
