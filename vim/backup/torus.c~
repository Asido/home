#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>

GLuint theTorus;

/* Draw a torus */
static void torus(int numc, int numt)
{
	int i, j, k;
	double s, t, x, y, z, twopi;

	twopi = 2 * (double)M_PI;
	for (i = 0; i < numc; ++i)
	{
		glBegin(GL_QUAD_STRIP);
			for (j = 0; j <= numt; ++j)
			{
				for (k = 1; k >= 0; --k)
				{
					s = (i + k) % numc + 0.5;
					t = j % numt;

					x = (1 + .1 * cos(s*twopi/numc)) * cos(t*twopi/numt);
					y = (1 + .1 * cos(s*twopi/numc)) * sin(t*twopi/numt);
					z = .1 * sin(s * twopi / numc);
					glVertex3f(x, y, z);
				}
			}
		glEnd();
	}
}

/* Create display list with Torus and initialize state */
static void init(void)
{
	theTorus = glGenLists(1);
	glNewList(theTorus, GL_COMPILE);
	torus(8, 25);
	glEndList();

	glShadeModel(GL_FLAT);
	glClearColor(0.0, 0.0, 0.0, 0.0);

	GLfloat position[] = { 5.0f, 5.0f, 5.0f };
	glLightfv(GL_LIGHT0, GL_POSITION, position);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
}

void display(void)
{
	/* glPolygonMode(GL_FRONT_AND_BACK, GL_POINT); */
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glColor3f(1.0f, 1.0f, 1.0f);
	glCallList(theTorus);
	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(30, (GLfloat)w / (GLfloat)h, 1.0, 100.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0, 0, 10, 0, 0, 0, 0, 1, 0);
}

/* Rotate about x-axis when 'x' typed; rotate about y-axis
 * when 'y' typed; 'i' returns torus to original view */
void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'x':
		case 'X':
			glRotatef(5.f, 1.0f, 0.0f, 0.0f);
			glutPostRedisplay();
			break;
		case 'y':
		case 'Y':
			glRotatef(5.f, 0.0f, 1.0f, 0.0f);
			glutPostRedisplay();
			break;
		case 'i':
		case 'I':
			glLoadIdentity();
			gluLookAt(0, 0, 10, 0, 0, 0, 0, 1, 0);
			glutPostRedisplay();
			break;
		case 27:
			exit(0);
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(200, 200);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}
