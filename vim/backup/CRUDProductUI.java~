package TUI;

import java.util.Scanner;

import rhinestone.Control.CRUDProductController;
import rhinestone.Model.Product;

public class CRUDProductUI {
	private CRUDProductController controller;

	public CRUDProductUI(CRUDProductController controller) {
		this.controller = controller;
	}

	public void startMenu() {
		boolean finished = false;
		while(!finished) {
			printMenu();
			int choice = promptChoiceInput();
			switch(choice) {
				case 1:
					controller.addProduct(promptBarcodeInput());
					pause();
					break;
				case 2:
					printProduct(controller.getProduct(promptBarcodeInput()));
					pause();
					break;
				case 3:
					System.out.println("Editing product " + promptBarcodeInput() + "...");
					pause();
					break;
				case 4:
					System.out.println("Deleting product " + promptBarcodeInput());
					pause();
					break;
				case 5:
					finished = true;
					break;
				default:
					System.err.println("ERR: CRUDProductUI default option");
					break;
			}
		}
	}

	private void printMenu() {
		System.out.println(" ----- CRUD PRODUCT MENU -----");
		System.out.println("\t(-1-) Add product");
		System.out.println("\t(-2-) Print product");
		System.out.println("\t(-3-) Edit product");
		System.out.println("\t(-4-) Delete product");
		System.out.println("\t(-5-) Back");
	}

	private int promptChoiceInput() {
		System.out.print("Your choice: ");
		int choice = new Scanner(System.in).nextInt();
		return choice;
	}

	private String promptBarcodeInput() {
		System.out.print("Product barcode: ");
		String barcode = new Scanner(System.in).nextLine();
		return barcode;
	}

	private void printProduct(Product product) {
		System.out.println("Product info: .........");
		pause();
	}

	private void pause() {
		try {
			Thread.sleep(1000);
		} catch(InterruptedException ex) {
			ex.printStackTrace();
		}
	}
}
