import java.util.ArrayList;

public class BarberWaitList extends WaitList implements Observable
{
	// these are the seats where the customer will wait in queue
	private Customer[] seats;
	private ArrayList<Observer> observers;

	// CONSTRUCTOR. it takes an amount of available seats in this shop
	public BarberWaitList(int seat_count)
	{
		seats = new Customer[seat_count];
		observers = new ArrayList<Observer>();
	}

	// the barbers will add themselves in this list,
	// so that when he sleeps, the incoming customer will wake him up
	public void add_observer(Observer observer)
	{
		observers.add(observer);
	}

	// wakes up a sleeping barber if there is any
	public void notify_observers()
	{
		for (Observer observer : observers)
			observer.notify_observer();
	}

	// the customer will call this method to register himself in queue
	public void sit_down(Customer customer)
	{
		for (int i = 0; i < seats.length; ++i) {
			if (seats[i] == null) {
				seats[i] = customer;
				notify_observers();
				break;
			}
		}
	}

	// returns true if the waiting room is full, false otherwise
	public boolean is_full()
	{
		if (seats[seats.length - 1] == null)
			return false;
		return true;
	}

	// return true if waiting room is empty and false otherwise
	public boolean is_empty()
	{
		if (seats[0] == null)
			return true;
		return false;
	}

	// returns the amount of customers in the waiting list
	private int waiting_count()
	{
		int count = 0;
		for (int i = 0; i < seats.length; ++i) {
			if (seats[i] != null) ++count;
			else break;
		}
		return count;
	}

	// barber will call this method to take out a customer from waiting list
	// it simply shifts the waiting guys towards the beginning of array by 1 overwriting the first one
	public void next()
	{
		if (is_empty())
			return;

		int waiting_count = waiting_count();
		for (int i = 0; i < waiting_count - 1; ++i)
			seats[i] = seats[i+1];
		seats[waiting_count-1] = null;
	}
}
