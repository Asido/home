-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- Vicious widgets
require("vicious")
-- Calendar2
require("calendar2")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/usr/share/awesome/themes/default/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "terminator"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " -x " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,		-- 1
    awful.layout.suit.tile,		-- 2
    awful.layout.suit.tile.left,	-- 3
    awful.layout.suit.tile.bottom,	-- 4
    awful.layout.suit.tile.top,		-- 5
    awful.layout.suit.fair,		-- 6
    awful.layout.suit.fair.horizontal,	-- 7
    awful.layout.suit.spiral,		-- 8
    awful.layout.suit.spiral.dwindle,	-- 9
    awful.layout.suit.max,		-- 10
    awful.layout.suit.max.fullscreen,	-- 11
    awful.layout.suit.magnifier		-- 12
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {
	name = { "main", "www", "development", "docs", "chat", "misc" },
	layout = { layouts[0], layouts[1], layouts[2],
			   layouts[1], layouts[1], layouts[1] }
}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag(tags.name, s, tags.layout[s])
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome", beautiful.manual_icon },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua", beautiful.config_icon },
   { "restart", awesome.restart, beautiful.restart_icon },
   { "quit", awesome.quit, beautiful.shutdown_icon }
}

internetmenu = {
	{ "KTorrent", "ktorrent", beautiful.ktorrent_icon },
	{ "Chrome", "google-chrome", beautiful.chrome_icon },
	{ "Firefox", "firefox", beautiful.firefox_icon },
	{ "Thunderbird", "thunderbird", beautiful.thunderbird_icon },
	{ "Skype", "skype", beautiful.skype_icon },
	{ "XChat", "xchat", beautiful.xchat_icon }
}

developmenu = {
	{ "Netbeans", "netbeans", beautiful.netbeans_icon },
	{ "Eclipse", "eclipse", beautiful.eclipse_icon },
	{ "Code::Blocks", "codeblocks", beautiful.codeblocks_icon },
	{ "VIM", "gvim", beautiful.vim_icon },
	{ "-----------------"},
	{ "Blender", "blender", beautiful.blender_icon },
	{ "GIMP", "gimp", beautiful.gimp_icon },
	{ "-----------------"},
	{ "OpenOffice", "soffice", beautiful.office_icon },
	{ "UML", "umbrello", beautiful.uml_icon }
}

officemenu = {
	{ "UML", "umbrello", beautiful.uml_icon }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
									{ "internet", internetmenu, beautiful.awesome_icon },
									{ "dev", developmenu, beautiful.awesome_icon },
									{ "-----------------"},
                                    { "terminal", terminal, beautiful.terminal_icon },
									{ "file manager", "dolphin", beautiful.filemanager_icon },
									{ "PDF reader", "okular", beautiful.pdf_icon },
									{ "recorder", "xvidcap", beautiful.record_desktop_icon },
									{ "WinFF", "winff" },
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- separator
separator = widget({ type = "textbox" })
separator.text = " :: "
-- spacer
spacer = widget({ type = "textbox" })
spacer.text = "  "

-- {{{ Wibox
--
--{{{ WIFI
-- Initialize widget
netwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(netwidget, vicious.widgets.net, '<span color="#ffffff">down: ${wlan0 down_kb}kb/s</span> <span color="#ffffff"> / up: ${wlan0 up_kb}kb/s</span>', 3)
-- Initialize network icon
wifi_icon = widget({ type = "imagebox" })
wifi_icon.image = image(beautiful.widget_net)
--}}}
--{{{ memory
memwidget = widget({ type = "textbox" })
vicious.register(memwidget, vicious.widgets.mem, "<span color='#fff'> $1% ($2MB/$3MB) </span>", 13)
memicon = widget({ type = "imagebox" })
memicon.image = image(beautiful.widget_mem)
--}}}
--{{{ batery
batterywidget = widget({ type = "textbox" })
vicious.register(batterywidget, vicious.widgets.bat, "$1$2%", 31, "BAT0")
batteryicon = widget({ type = "imagebox" })
batteryicon.image = image(beautiful.widget_battery)
--}}}
--{{{ mail
gmailicon = widget({ type = "imagebox" })
gmailicon.image = image(beautiful.widget_mail)
gmailwidget = widget({ type = "textbox" })
vicious.register(gmailwidget, vicious.widgets.gmail, "<span color='#fff'>Mail: ${count} | ${subject} </span>", 20)
--}}}
--{{{ cpu
cpuwidget = widget({ type = "textbox" })
vicious.register(cpuwidget, vicious.widgets.cpu, "$2% | $3%")
cpuicon = widget({ type = "imagebox" })
cpuicon.image = image(beautiful.widget_cpu)
--}}}
--{{{ hdd
hddwidget = widget({ type = "textbox" })
vicious.register(hddwidget, vicious.widgets.fs, "system: ${/ used_gb}GB / ${/ size_gb}GB | home: ${/home used_gb}GB / ${/home size_gb}GB")
hddicon = widget({ type = "imagebox" })
hddicon.image = image(beautiful.widget_hdd)
--}}}
--{{{ volume
volumeicon = widget({ type = "imagebox" })
volumeicon.image = image(beautiful.widget_volume)
volumewidget = widget({ type = "textbox" })
vicious.register(volumewidget, vicious.widgets.volume, "$1%", 2, "PCM")
volumewidget:buttons(awful.util.table.join(
	awful.button({ }, 1, function () exec("amixer -q sset PCM 2dB+", false) end)
))
--}}}

-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })
calendar2.addCalendarToWidget(mytextclock)

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mywibox_bottom = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
	mywibox_bottom[s] = awful.wibox({ position = "bottom", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
			separator,
            mytaglist[s],
			separator,
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
		separator,
		volumewidget,
		volumeicon,
		separator,
		dnicon,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }

	mywibox_bottom[s].widgets = {
		{
			gmailicon,
			gmailwidget,
			layout = awful.widget.layout.horizontal.leftright
		},
		spacer,
		netwidget,
		wifi_icon,
		separator,
		cpuwidget,
		cpuicon,
		separator,
		memwidget,
		memicon,
		separator,
		batterywidget,
		batteryicon,
		separator,
		hddwidget,
		hddicon,
		layout = awful.widget.layout.horizontal.rightleft
	}
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    --awful.key({ modkey,           }, "j",
    --    function ()
    --        awful.client.focus.byidx( 1)
    --        if client.focus then client.focus:raise() end
    --    end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),
	awful.key({ }, "F10", function () awful.util.spawn("import -window root /home/asido/screen-" .. os.time() .. ".png") end),
	awful.key({ modkey }, "F12", function () awful.util.spawn("amixer set PCM 5%+ > /dev/null") end),
	awful.key({ modkey }, "F11", function () awful.util.spawn("amixer set PCM 5%- > /dev/null") end),
	awful.key({ modkey }, "F10", function () awful.util.spawn("amixer set PCM 0% > /dev/null") end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
	awful.key({ modkey            }, "KP_Down",  function () print("IT WORKS!")            end),
	awful.key({ modkey            }, "BackSpace",  function () print("BACKSPACE RPESSED")            end),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "f",      function (c) awful.client.maximize(c)         end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
     { rule = { class = "Firefox" },
       properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
