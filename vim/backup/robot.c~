#include <GL/glut.h>

static int shoulder = 0, elbow = 0;
static int fingers = 0, thumb = 0;

void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_FLAT);

	glEnable(GL_LINE_SMOOTH);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	
	glPushMatrix();
		/* draw arm near shoulder */
		glTranslatef(-1.0f, 0.0f, 0.0f);
		glRotatef((GLfloat) shoulder, 0.0f, 0.0f, 1.0f);
		glTranslatef(1.0f, 0.0f, 0.0f);
		glPushMatrix();
			glScalef(2.0f, 0.4f, 1.0f);
			glutWireCube(1.0);
		glPopMatrix();

		/* draw elbow */
		glTranslatef(1.0f, 0.0f, 0.0f);
		glRotatef((GLfloat) elbow, 0.0f, 0.0f, 1.0f);
		glTranslatef(1.0f, 0.0f, 0.0f);
		glPushMatrix();
			glScalef(2.0f, 0.4f, 1.0f);
			glutWireCube(1.0);
		glPopMatrix();

		/* draw fingers */
		glPushMatrix();
			glTranslatef(1.0f, 0.15f, 0.3f);
			glRotatef((GLfloat) fingers, 0.0f, 0.0f, 1.0f);
			glTranslatef(0.2f, 0.0f, 0.0f);
			glPushMatrix();
				glScalef(2.0f, 0.4f, 1.0f);
				glutWireCube(0.2);
				glTranslatef(0.0f, 0.0f, -0.25f);
				glutWireCube(0.2);
				glTranslatef(0.0f, 0.0f, -0.25f);
				glutWireCube(0.2);
				glTranslatef(0.0f, -0.30f, 0.5f);
			glPopMatrix();
		glPopMatrix();

		/* draw thumb */
		glPushMatrix();
			glTranslatef(1.0f, -0.15f, 0.3f);
			glRotatef((GLfloat) thumb, 0.0f, 0.0f, 1.0f);
			glTranslatef(0.2f, 0.0f, 0.0f);
			glPushMatrix();
				glScalef(2.0f, 0.4f, 1.0f);
				glutWireCube(0.2);
			glPopMatrix();
		glPopMatrix();

	glPopMatrix();
	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(65.0, (GLfloat)w / (GLfloat)h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0.0f, 0.1f, -5.0f);
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 's':	/* s key rotates at shoulder */
			shoulder = (shoulder + 5) % 360;
			glutPostRedisplay();
			break;
		case 'S':
			shoulder = (shoulder - 5) % 360;
			glutPostRedisplay();
			break;
		case 'e':	/* e key rotates at elbow */
			elbow = (elbow + 5) % 360;
			glutPostRedisplay();
			break;
		case 'E':
			elbow = (elbow - 5) % 360;
			glutPostRedisplay();
			break;
		case 'f':
			fingers = (fingers + 5) % 360;
			thumb = (thumb - 5) % 360;
			glutPostRedisplay();
			break;
		case 'F':
			fingers = (fingers - 5) % 360;
			thumb = (thumb + 5) % 360;
			glutPostRedisplay();
			break;
		case 'c':
			glRotatef(5.0f, 0.0f, 1.0f, 0.0f);
			glutPostRedisplay();
			break;
		case 'C':
			glRotatef(-5.0f, 0.0f, 1.0f, 0.0f);
			glutPostRedisplay();
			break;
		default:
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(700, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}
