#ifndef CORE_H57EGKD6
#define CORE_H57EGKD6

#include <vector>
#include <iostream>
#include <istream>
#include <stdexcept>
#include "handle.h"

// Core represents the students, meeting the core requirements for the course
class Core {
	friend class Student_info;

	public:
		// default constructor
		Core(): midterm(0), final(0) {}
		// build a Core from an istream
		Core(std::istream& is) { read(is); }
		virtual ~Core() {}

		std::string name() const;
		virtual std::istream& read(std::istream&);
		virtual double grade() const;
		virtual bool valid() const { return !homework.empty(); }
		virtual Core* clone() const { return new Core(*this); }

	protected:
		std::istream& read_common(std::istream&);
		std::istream& read_hw(std::istream& in, std::vector<double>& hw);
		double midterm, final;
		std::vector<double> homework;

	private:
		// accessible only to Core
		std::string n;
};


// Grad inherits from Core, adding the requirements for completing a thesis
class Grad: public Core
{
	public:
		// both constructors implicitly use Core::Core() to initialize the base part
		Grad(): thesis(0) {}
		Grad(std::istream& in) { read(in); }

		// these two functions are virtual by inheritance
		double grade() const;
		std::istream& read(std::istream&);
		bool valid() const { return !homework.empty() && thesis != 0; }
		Grad* clone() const { return new Grad(*this); }

	private:
		double thesis;
};


class Student_info
{
	public:
		// constructors and copy control
		Student_info() {}
		Student_info(std::istream& is) { read(is); }

		// operations
		std::istream& read(std::istream&);

		std::string name() const
		{
			if (cp)
				return cp->name();
			throw std::runtime_error("uninitialized Student");
		}

		double grade() const
		{
			if (cp)
				return cp->grade();
			throw std::runtime_error("uninitialized Student");
		}

		static bool compare(const Student_info& s1, const Student_info& s2)
		{
			return s1.name() < s2.name();
		}

		void regrade(double final, double thesis)
		{
			// get our own copy before changing the object
			cp.make_unique();
			if(cp)
				cp->regrade(final, thesis);
			throw std::runtime_error("regrade of unknown student");
		}

	private:
		Handle<Core> cp;
};


bool compare(const Core&, const Core&);
bool compare_Core_ptrs(const Core* cp1, const Core* cp2);
bool compare_Core_handles(const Handle<Core> a, const Handle<Core>& b);

#endif /* end of include guard: CORE_H57EGKD6 */
