#include <GL/glut.h>

GLfloat diffuseMaterial[4] = { 0.5f, 0.5f, 0.5f, 1.0f };

void init(void)
{
	GLfloat mat_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	GLfloat light_position[] = { 1.0f, 1.0f, 1.0f, 0.0f };

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_SMOOTH);
	glEnable(GL_DEPTH_TEST);
	/* glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseMaterial); */
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialf(GL_FRONT, GL_SHININESS, 25.0f);
	glMaterialf(GL_BACK, GL_SHININESS, 100.0f);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glColorMaterial(GL_FRONT, GL_DIFFUSE);
	glEnable(GL_COLOR_MATERIAL);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	GLdouble clips[3][4] = {
			{ -1.0,  0.0,  0.0,  0.0 },
			{  0.0, -1.0,  0.0,  0.0 },
			{  0.0,  0.0, -1.0,  0.0 }
	};

	// ENABLE TO CLIP 1/4 OF THE SPHERE
	/* glEnable(GL_CLIP_PLANE0); */

	int i;
	for (i = 0; i < 3; ++i)
	{
		glClipPlane(GL_CLIP_PLANE0, clips[i]);
		glutSolidSphere(1.0, 60, 60);
	}

	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0.0, 0.0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
		glOrtho(-1.5, 1.5, -1.5 * (GLfloat)h / (GLfloat)w, 1.5 * (GLfloat)h / (GLfloat)w, -10.0, 10.0);
	else
		glOrtho(-1.5 * (GLfloat)w / (GLfloat)h, 1.5 * (GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
	switch (button)
	{
		case GLUT_LEFT_BUTTON:
			if (state == GLUT_DOWN)				/* change red */
			{
				diffuseMaterial[0] += 0.1f;
				if (diffuseMaterial[0] > 1.0f)
					diffuseMaterial[0] = 0.0f;
				glColor4fv(diffuseMaterial);
				glutPostRedisplay();
			}
			break;
		case GLUT_MIDDLE_BUTTON:
			if (state == GLUT_DOWN)				/* change green */
			{
				diffuseMaterial[1] += 0.1f;
				if (diffuseMaterial[1] > 1.0f)
					diffuseMaterial[1] = 0.0f;
				glColor4fv(diffuseMaterial);
				glutPostRedisplay();
			}
			break;
		case GLUT_RIGHT_BUTTON:
			if (state == GLUT_DOWN)				/* change blue */
			{
				diffuseMaterial[2] += 0.1f;
				if (diffuseMaterial[2] > 1.0f)
					diffuseMaterial[2] = 0.0f;
				glColor4fv(diffuseMaterial);
				glutPostRedisplay();
			}
			break;
		default:
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMouseFunc(mouse);
	glutMainLoop();
	return 0;
}
