//****************************************************************************
//**
//**    cpu.c
//**
//**	This is the processor interface. Everything outside of this module
//**	must use this interface when working on processor data.
//**
//**	A processor is a module that manages the very basic data structures
//**	and data within the system. The processor interface provides the interface
//**	for managing processors, processor cores, accessing processor structures,
//**	and more
//**
//****************************************************************************

//============================================================================
//    IMPLEMENTATION HEADERS
//============================================================================

#include <cpu.h>
#include <gdt.h>
#include <idt.h>

//============================================================================
//    INTERFACE FUNCTIONS
//============================================================================

// Initializes cpu resources
int i86_cpu_initialize ()
{
	// initialize processor tables
	i86_gdt_initialize ();
	i86_idt_initialize (0x8);

	return 0;
}

// shuts down cpu resources...Nothing to do yet
void i86_cpu_shutdown () {
}


// returns vender name of cpu
char* i86_cpu_get_vender()
{
	static char	vender[32] = {0};

	asm("mov eax, 0\n");
	asm("cpuid\n");
	asm("mov dword ptr [vender], ebx\n");
	asm("mov dword ptr [vender+4], edx\n");
	asm("mov dword ptr [vender+8], ecx\n");

	return vender;
}
