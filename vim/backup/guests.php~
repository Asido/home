<?php

if ( !database ) require ( 'database.php' );

class guest
{
	private $key;
	
	public function guest ( $key = false )
	{
		if ( ! $key ) $this->guest_key(); else $this->key = $key;
		$this->clean_guests();	//cleaning expired guests keys
	}
	
	private function clean_guests ()			//	Removes all guests keys from db which have expired
	{
		$db 	= database::get_instance();
		$exp	= time () - CONFIG::GUEST_EXPIRE_TIME;
		
		$keys	= $db->query(
						'	SELECT 	`key`
							FROM 	`guests`
							WHERE	`timestamp` <= '.$exp );
		while ( $key = $db->fetch( $keys ) )
		{
			$db->query(
					'	DELETE
						FROM `guests_profile_answers`
						WHERE `guest_key` = \''.$key[0].'\'' );
		}
		
		$db->query(
				'	DELETE
					FROM `guests`
					WHERE `timestamp` <= '.$exp );
	}
	
	public function get_question ( $exceptions )		// returns false if there's no other question to answer
	{
		$exceptions 	= isset($exceptions) && is_array($exceptions) ? $exceptions : array ();
		$questions 		= $this->questions_num();
		$answers		= $this->get_answered();
		
		$answers_len 	= count ( $answers );
		$exceptions_len = count ( $exceptions );
		
		if ( $answers_len + $exceptions_len >= $questions )
		{
			if ( $answers_len >= $questions ) return false;
			
			$exceptions 		= array ();
			$exceptions_len		= 0;
			$exceptions_reset	= true;
		}
		
		$question	= false;
		$db 		= database::get_instance();
		while (!$question)
		{
			$r		= $db->query(	
							'	SELECT *
								FROM `profile_questions`
								ORDER BY RAND()
								LIMIT 1 ' );
			$r		= $db->fetch( $r );
			
			if (	! in_array ( $r['id'], $answers ) &&
				 	! in_array ( $r['id'], $exceptions )
				) 
					$question = $r;
		}
		
		$question['reset_exceptions'] = $exceptions_reset ? 'true' : 'false';
		
		return $question;
	}
	
	private function create ()			// creates a cookie key with the guest id (key)
	{
		$db 	= database::get_instance();
		$key	= md5 ( time () . $_SERVER['REMOTE_ADDR'] );
		setcookie ('guest_key', $key );
		
		$r 		= $db->query(
					'	INSERT
						INTO `guests` (`key`, `timestamp`)
						VALUES ( \''.$key.'\', '.time ().' ) ' );
		return $r ? $key : false;
	}
	
	public function guest_key ($create = true)		// returns the guest key or creates one
	{
		if ( $this->key ) return $this->key;
		
		$key 	= isset ( $_COOKIE['guest_key'] ) ? $_COOKIE['guest_key'] : false;
		if ( !$key ) { if ($create) $key = $this->create(); }
		else
		{
			$db = database::get_instance();
			//check if key exists
			$gkey	= $db->get_field_value( 'guests', 'timestamp', '`key`=\''.$key.'\'' );
			if (!$gkey) $key = $create ? $this->create() : false;
		}
		
		if (!$key) return false;

		$key = mysql_real_escape_string ( $key );
		
		$this->key = $key;
		return $key;
	}
	
	public function get_answers ()		//returns all answered questions by this guest key
	{
		if ( !$this->key ) $this->guest_key();
		$db = database::get_instance();
		
		$r	= $db->query(
					'	SELECT *
						FROM `guests_profile_answers`
						WHERE guest_key = \''.$this->key.'\' ' );
						
		$r	= $db->to_array( $r );
		
		return $r;
	}
	
	private function get_answered ()		//returns answered id's
	{
		if ( !$this->key ) $this->guest_key();
		$db = database::get_instance();
		
		$r	= $db->query(
					'	SELECT `question_id`
						FROM `guests_profile_answers`
						WHERE guest_key = \''.$this->key.'\' ' );
		
		if ( ! $r ) return false;
		
		$qid = array ();
		while ($row = $db->fetch( $r )) array_push ( $qid, $row[0] );
		
		return $qid;
	}
	
	public function questions_num ()
	{
		$db = database::get_instance();
		$r	= $db->query(
				'	SELECT *
					FROM `profile_questions` ' );
		
		return $r ? mysql_num_rows($r) : 0;
	}
	
	public function set_answer ( $question_id, $answer_num )
	{
		// if ( 	($answer_num < 1) ||
		// 		($answer_num > 4)
		// 	)
		// 		return;
		
		$key	= $this->guest_key();
		$db 	= database::get_instance();
		//check if question exists
		$qid 	= $db->get_field_value( 'profile_questions', 'question', '`id`='.$question_id );
		if ( !$qid ) { return false; }
		
		//checks if question if answered
		$ans	= $db->get_field_value( 'guests_profile_answers', 'answer', '`guest_key`=\''.$key.'\' AND `question_id`='.$question_id );
		if ( $ans !== false ) { return false; }	
			
		//set answer
		$db->format_string($answer_num);
		$r		= $db->query(
						'	INSERT
							INTO `guests_profile_answers`
							VALUES ( '.$question_id.', \''.$key.'\', \''.$answer_num.'\', CURDATE() )' );
		
		return $r ? true : false;
	}
	
	public function rem_answers () // returns remaining answers
	{
		$questions 	= $this->questions_num();
		$answers	= $this->get_answered();
		
		return $questions - count( $answers );
	}
	
	public function delete_guest ()
	{
		$key 	= $this->guest_key();
		$db		= database::get_instance();
		
		$db->query(
				'	DELETE
					FROM `guests`
					WHERE `key` = \''.$key.'\'' );
		
		$db->query(
				'	DELETE
					FROM `guests_profile_answers`
					WHERE `guest_key` = \''.$key.'\'' );
	}
}

?>
