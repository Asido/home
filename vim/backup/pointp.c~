#include <GL/glut.h>

static GLfloat constant[3] = { 1.0f, 0.0f, 0.0f };
static GLfloat linear[3] = { 0.0f, 0.12f, 0.0f };
static GLfloat quadratic[3] = { 0.0f, 0.0f, 0.01f };

void init(void)
{
	/* This is they key in point smoothing */
	glEnable(GL_POINT_SMOOTH);

	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0f, 1.0f, 1.0f);
	glPointSize(20.0);
	glBegin(GL_POINTS);
	/* glTranslatef(0.0f, 0.0f, -5.0f); */
	glVertex3f(0.0f, 0.0f, -5.0f);
	glEnd();

	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, 1.0, 1.0, 100.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'c':
			glPointParameterfv(GL_POINT_DISTANCE_ATTENUATION, constant);
			glutPostRedisplay();
			break;
		case 'l':
			glPointParameterfv(GL_POINT_DISTANCE_ATTENUATION, linear);
			glutPostRedisplay();
			break;
		case 'q':
			glPointParameterfv(GL_POINT_DISTANCE_ATTENUATION, quadratic);
			glutPostRedisplay();
			break;
		case 'b':
			glMatrixMode(GL_MODELVIEW);
			glTranslatef(0.0f, 0.0f, -0.5f);
			glutPostRedisplay();
			break;
		case 'f':
			glMatrixMode(GL_MODELVIEW);
			glTranslatef(0.0f, 0.0f, 0.5f);
			glutPostRedisplay();
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}
