#include <stdio.h>

#define MAX_SIZE 1000

void getLine(char line[]);
void checkSyntax(char line[]);
void initializeArray(int arr[]);
int getLine(char* ch, int occurence, char text[]);

int main() {
	char line[MAX_SIZE];
	int length;

	getLine(line);
	checkSyntax(line);

	return 0;
}

void getLine(char line[]) {
	int i = 0;
	int ch;

	while((ch = getchar()) != EOF && i < (MAX_SIZE - 1)) {
		line[i] = ch;
		i++;
	}
	line[i] = '\0';
}

void checkSyntax(char line[]) {
	int i;

	int openBr[MAX_SIZE];
	int closeBr[MAX_SIZE];
	int openBrIdx = 0;
	int closeBrIdx = 0;
	
	initializeArray(openBr);
	initializeArray(closeBr);

	for(i = 0; line[i] != '\0'; i++) {
		if(line[i] == '(')
			openBr[openBrIdx++]++;
		if(line[i] == ')')
			closeBr[closeBrIdx++]++;
	}

	int unclosed = openBrIdx - closeBrIdx;
	int unopened = closeBrIdx - openBrIdx;
	if(unclosed > 0) {
		printf("%d bracket(s) are not closed!\nOn line(s):", unclosed);
		for(i = 0; i < unclosed; i++)
			printf("%d, ", getLine('(', i, line));
	}
	if(unopened > 0) {
		printf("%d brackets are not opened!\n", unopened);
	}

	printf("Done!\n");
}

int getLine(char* ch, int occurence, char text[]) {
	int i;
	int line = 0;
	int occurenceCount;

	for(i = 0; text[i] != '\0'; i++) {
		if(text[i] == '\n')
			line++;
		if(text[i] == ch) {
			occurenceCount++;
			if(occurenceCount == occurence) {
				return line;
			}
		}
	}
}

void initializeArray(int arr[]) {
	int i;
	for(i = 0; i < MAX_SIZE; i++)
		arr[i] = 0;
}
