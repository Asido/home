#include <GL/glut.h>
#include <stdio.h>

static int spinx = 0;
static int spiny = 0;
static double translatex = 0;

void init(void)
{
	glClearColor(0.0f, 0.0f, 0.0, 0.0f);
	glShadeModel(GL_SMOOTH);

	GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };

	GLfloat shininess[] = { 50.0f };
	glMaterialfv(GL_FRONT, GL_SPECULAR, specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, shininess);

	glLightfv(GL_LIGHT0, GL_SPECULAR, specular);
	/* GLfloat diffuse[] = { 1.0f, 0.0f, 0.0f }; */
	glLightfv(GL_LIGHT0, GL_DIFFUSE, specular);
	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 2.0f);
	glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.1f);

	/* glLightModeli(GL_LIGHT_MODEL_COLOR_CONTROL, GL_SEPARATE_SPECULAR_COLOR); */
	glLightModelf(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_TRUE);
	glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE);
	glEnable(GL_CULL_FACE);
	glFrontFace(GL_CCW);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glEnable(GL_DEPTH_TEST);
}

/* Here is where the light position is reset after the modeling
 * transformation (glRotated) is called. This places the
 * light at a new position in world coordinates. The cube
 * represents the position of the light.
 */
void display(void)
{
	GLfloat position[] = { 0.0f, 0.0f, 1.5f, 1.0f };

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glPushMatrix();
	glTranslatef(0.0f, 0.0f, -5.0f);

	glPushMatrix();
	glRotated((GLdouble) spinx, 1.0, 0.0, 0.0);
	glRotated((GLdouble) spiny, 0.0, 1.0, 0.0);
	glTranslated(translatex, 0.0, 0.0);
	glLightfv(GL_LIGHT0, GL_POSITION, position);

	glTranslated(0.0, 0.0, 1.5);
	glDisable(GL_LIGHTING);
	glColor3f(0.0f, 1.0f, 1.0f);
	glutWireCube(0.1);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glutSolidTorus(0.275, 0.85, 80, 150);
	glPopMatrix();
	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(40.0, (GLfloat)w / (GLfloat)h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
	switch (button)
	{
		case GLUT_LEFT_BUTTON:
			if (state == GLUT_DOWN)
			{
				spinx = (spinx + 30) % 360;
				glutPostRedisplay();
			}
			break;
		default:
			break;
	}
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'r':
			spinx = (spinx + 5) % 360;
			glutPostRedisplay();
			break;
		case 'R':
			spiny = (spiny + 5) % 360;
			glutPostRedisplay();
			break;
		case 't':
			translatex += .1;
			glutPostRedisplay();
			break;
		case 'T':
			translatex += -.1;
			glutPostRedisplay();
			break;
		default:
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMouseFunc(mouse);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}
