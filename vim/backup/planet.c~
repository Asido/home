#include <GL/glut.h>

static int year = 0, day = 0;

void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_FLAT);
	glEnable(GL_DEPTH_TEST);

	glEnable(GL_LINE_SMOOTH);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glHint(GL_LINE_SMOOTH_HINT, GL_DONT_CARE);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix();
		glRotatef(45.0f, 1.0f, 1.0f, 0.0f);
		glColor3f(255.0/255.0, 146.0/255.0, 44.0/255.0);
		glLineWidth(1.5);
		glutWireSphere(1.0, 20, 16);	/* draw sun */
	glPopMatrix();

	glPushMatrix();
		glRotatef((GLfloat) year, 0.0f, 1.0f, 0.0f);
		glTranslatef(2.0f, 0.0f, 0.0f);
		glRotatef((GLfloat) day, -1.0f, 1.0f, 0.0f);
		glColor3f(0.5f, 0.5f, 0.5f);
		glutWireSphere(0.25, 10, 8);		/* draw smaller planet */

		glPushMatrix();
			glRotatef((GLfloat) year*2, 0.0f, 1.0f, 0.0f);
			glTranslatef(0.4f, 0.0f, 0.0f);
			glutWireSphere(0.1, 5, 4);		/* draw smaller planets moon */
		glPopMatrix();
	glPopMatrix();

	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (GLfloat)w / (GLfloat)h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'd':
			day = (day + 10) % 360;
			glutPostRedisplay();
			break;
		case 'D':
			day = (day - 10) % 360;
			glutPostRedisplay();
			break;
		case 'y':
			year = (year + 5) % 360;
			glutPostRedisplay();
			break;
		case 'Y':
			year = (year - 5) % 360;
			glutPostRedisplay();
			break;
		default:
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}
