#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>

static int bgtoggle = 1;

/*
 * Print out state values related to multisampling.
 * Create display list with "pinwheel" of lines and
 * triangles.
 */
void init(void)
{
	GLint buf, sbuf;
	int i, j;

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glGetIntegerv(GL_SAMPLE_BUFFERS, &buf);
	printf("Number of sample buffers: %d\n", buf);
	glGetIntegerv(GL_SAMPLES, &sbuf);
	printf("Number of samples: %d\n", sbuf);

	glNewList(1, GL_COMPILE);
	for (i = 0; i < 19; ++i)
	{
		glPushMatrix();
		glRotatef(360.0 * (float)i / 19.0, 0.0, 0.0, 1.0);
		glColor3f(1.0f, 1.0f, 1.0f);
		glLineWidth((i % 3) + 1.0);
		glBegin(GL_LINES);
			glVertex2f(0.25f, 0.05f);
			glVertex2f(0.9f, 0.2f);
		glEnd();
		glColor3f(0.0f, 1.0f, 1.0f);
		glBegin(GL_TRIANGLES);
			glVertex2f(0.25f, 0.0f);
			glVertex2f(0.9f, 0.0f);
			glVertex2f(0.875f, 0.10f);
		glEnd();
		glPopMatrix();
	}
	glEndList();

	glNewList(2, GL_COMPILE);
	glColor3f(1.0f, 0.5f, 0.0f);
	glBegin(GL_QUADS);
	for(i = 0; i < 16; ++i)
	{
		for(j = 0; j < 16; ++j)
		{
			if (((i + j) % 2 ) == 0)
			{
				glVertex2f(-2.0 + (i * 0.25), -2.0 + (j * 0.25));
				glVertex2f(-2.0 + (i * 0.25), -1.75 + (j * 0.25));
				glVertex2f(-1.75 + (i * 0.25), -1.75 + (j * 0.25));
				glVertex2f(-1.75 + (i * 0.25), -2.0 + (j * 0.25));
			}
		}
	}
	glEnd();
	glEndList();
}

/*
 * Draw two sets of primitives so that you can 
 * compare the user of multisampling against its absence.
 *
 * This code enables antialiasing and draws one display list,
 * and then it disabled and draws the other display list.
 */
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	if (bgtoggle)
		glCallList(2);

	glEnable(GL_MULTISAMPLE);
	glPushMatrix();
	glTranslatef(-1.0f, 0.0f, 0.0f);
	glCallList(1);
	glPopMatrix();

	glDisable(GL_MULTISAMPLE);
	glPushMatrix();
	glTranslatef(1.0f, 0.0f, 0.0f);
	glCallList(1);
	glPopMatrix();

	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
		gluOrtho2D(-2.0, 2.0, -2.0 * (GLfloat)h / (GLfloat)w, 2.0 * (GLfloat)h / (GLfloat)w);
	else
		gluOrtho2D(-2.0 * (GLfloat)w / (GLfloat)h, 2.0 * (GLfloat)w / (GLfloat)h, -2.0, 2.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'b':
		case 'B':
			bgtoggle = !bgtoggle;
			glutPostRedisplay();
			break;
		case 27:	/* Escape key */
			exit(0);
			break;
		default:
			break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_MULTISAMPLE);
	glutInitWindowSize(800, 800);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}
