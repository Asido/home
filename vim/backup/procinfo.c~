#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <dirent.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <pwd.h>

int is_numeric(const char *str)
{
	char c;
	int i = 0;

	while ((c = str[i++]) != '\0') {
		if (!isdigit(c))
			return 0;
	}
	return 1;
}

int get_line(int fd, char *line)
{
	int i;
	char c;

	for (i = 0 ;; ++i) {
		if (read(fd, &c, 1) == 0)
			break;
		if (c == '\n')
			break;
		line[i] = c;
	}
	line[i] = '\0';
	return i;
}

void getarg(char *line, char *buf)
{
	int i = 0;
	char *tmp = strchr(line, ':');
	++tmp; // to get into space area
	/* printf("%c", *tmp); */
	while (*tmp < 48 || *tmp > 122) {
		++tmp;
	}
	while (tmp[i] != '\0') {
		buf[i] = tmp[i];
		++i;
	}
	buf[i] = '\0';
}

int is_user_uid(uid_t uid, char *user)
{
	struct passwd *pw = getpwuid(uid);
	if (strcmp(pw->pw_name, user) == 0)
		return 1;
	return 0;
}

int users_process(int fd, char *user)
{
	char line[100];
	char arg[50];
	arg[0] = '\0';

	while (get_line(fd, line) != 0) {
		if (strstr(line, "Uid:") == line) {
			getarg(line, arg);
			char s_uid[10];
			int i = 0;
			while (strchr("0123456789", arg[i]) != NULL) {
				s_uid[i] = arg[i];
				++i;
			}
			s_uid[i] = '\0';
			return is_user_uid(atol(s_uid), user);
			
		}
	}
	return 0;
}

int getpfd(char *pid)
{
	char filename[100];
	filename[0] = '\0';
	strcat(filename, "/proc/");
	strcat(filename, pid);
	strcat(filename, "/status");
	int fd = open(filename, O_RDONLY);
	if (fd == -1)
		printf("ERROR: open");
	return fd;
}

void make_info_str(char *pid, char* command, char* buffer)
{
	strcat(buffer, "(");
	strcat(buffer, pid);
	strcat(buffer, ") ");
	strcat(buffer, command);
	/* strcat(buffer, "PID: "); */
	/* strcat(buffer, pid); */
	/* strcat(buffer, " | Used command: "); */
	/* strcat(buffer, command); */
}

char *getpinfo(char *pid, char* user)
{
	char line[100];
	char arg[50];
	static char info[255];
	int fd;

	line[0] = '\0';
	arg[0] = '\0';
	info[0] = '\0';
	fd = getpfd(pid);

	if (!users_process(fd, user))
		return NULL;

	lseek(fd, SEEK_SET, 0);

	while (get_line(fd, line) != 0) {
		if (strstr(line, "Name:") == line) {
			getarg(line, arg);
			make_info_str(pid, arg, info);
		}
	}
		
	if (close(fd) == -1)
		printf("ERROR: close");

	return info;
}


int main(int argc, char* argv[])
{
	if (argc != 2 || strcmp("--help", argv[1]) == 0) {
		printf("Usage: %s username\n", argv[0]);
		exit(EXIT_SUCCESS);
	}

	struct dirent *dir_info;
	DIR *dir;

	if ((dir = opendir("/proc")) == NULL) {
		printf("ERROR: opendir");
		exit(EXIT_FAILURE);
	}

	printf("Processes running by user %s:\n", argv[1]);
	while ((dir_info = readdir(dir)) != NULL) {
		if (is_numeric(dir_info->d_name)) {
			char *info = getpinfo(dir_info->d_name, argv[1]);
			if (info != NULL)
				printf("%s\n", info);
			/* getpinfo(dir_info->d_name, argv[1]); */
		}
	}

	closedir(dir);
	exit(EXIT_SUCCESS);
}
