#include <stdio.h>
#include <stdlib.h>	/* for atoi() */
#include <math.h>	/* sin(), pow()... */

#define MAXOP 100	/* max size of operand or operators */
#define NUMBER '0'	/* signal that a number was found */

int getop(char []);
void push(int);
int pop(void);
void printStack(void);
void swap(void);
void clear(void);

/* reverse Polish calculator */
int main() {
	int type;
	int op2;
	char s[MAXOP];

	while((type = getop(s)) != EOF) {
		switch(type) {
			case NUMBER:
				//printf("NUMBER: %d\n", atoi(s));
				push(atoi(s));
				break;
			case '+':
				push(pop() + pop());
				break;
			case '*':
				push(pop() * pop());
				break;
			case '-':
				op2 = pop();
				push(pop() - op2);
				break;
			case '/':
				op2 = pop();
				if(op2 != 0)
					push(pop() / op2);
				else
					printf("ERR: zero divisor\n");
				break;
			case '%':
				op2 = pop();
				if(op2 != 0)
					push(pop() % op2);
				else
					printf("ERR: zero divisor\n");
				break;
			case 'i':
				push(cos(pop()));
				break;
			case 'o':
				op2 = pop();
				push(pow(op2, pop()));
				break;
			case '\n':
				printf("\t%d\n", pop());
				break;
			case 'p':
				printStack();
				break;
			case 's':
				swap();
				break;
			case 'c':
				clear();
				break;
			default:
				printf("ERR: unknown command %s\n", s);
				break;

		}
	}

	return 0;
}



#define MAXVAL  100  /* maximum depth of val stack */

int sp = 0;          /* next free stack position */
int val[MAXVAL];  /* value stack */

/* push:  push f onto value stack */
void push(int f)
{
    if (sp < MAXVAL)
        val[sp++] = f;
    else
        printf("error: stack full, can't push %g\n", f);
}

/* pop:  pop and return top value from stack */
int pop(void) {
    if (sp > 0)
        return val[--sp];
    else {
        printf("error: stack empty\n");
		return 0;
	}
}

/* print: prints the stack */
void printStack(void) {
	int i;
	
	for(i = 0; i < sp; i++)
		printf("%d ", val[i]);
	printf("\n");
}

/* swap: swaps two top elements */
void swap(void) {
	int temp = val[sp-1];
	val[sp-1] = val[sp-2];
	val[sp-2] = temp;
}

void clear(void) {
	sp = 0;
}


#include <ctype.h>

int getch(void);
void ungetch(int);

/* getop:  get next character or numeric operand */
int getop(char s[]) {
    int i, c;
	int next;

    while ((s[0] = c = getch()) == ' ' || c == '\t')
        ;
    s[1] = '\0';
    if (!isdigit(c) && c != '.' && c != '-')
        return c;      /* not a number */
    i = 1;
	if(c == '-') {
		next = getch();
		if(!isdigit(next)) {
			ungetch(next);
			return c;
		}
		s[i++] = c = next;
	}
    if (isdigit(c))    /* collect more integers if any left */
        while (isdigit(s[i++] = c = getch()))
           ;
    s[i] = '\0';
    //if (c != EOF)
    //    ungetch(c);
    return NUMBER;
}

void printStr(char line[]) {
	int i;
	for(i = 0; line[i] != '\0'; i++)
		putchar(line[i]);
}



#define BUFSIZE 100

   char buf[BUFSIZE];    /* buffer for ungetch */
   int bufp = 0;         /* next free position in buf */

   int getch(void)  /* get a (possibly pushed-back) character */
   {
       return (bufp > 0) ? buf[--bufp] : getchar();
   }

   void ungetch(int c)   /* push character back on input */
   {
       if (bufp >= BUFSIZE)
           printf("ungetch: too many characters\n");
       else
           buf[bufp++] = c;
   }
